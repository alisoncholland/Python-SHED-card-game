# Copyright Â© 2017, Alison C. Holland, All rights reserved.

# Python SHED Card Game

# import libraries
from random import randint
from time import sleep

deckCards = [] # array holding full deck of cards
tableCards = [] # array of current cards on the table

# generate all cards for the deck and save in variable "deckCards"
# cards encoded as follows: 
# 	002-010: 2 of Spades to 10 of Spades, 011: Jack of Spades, 012: Queen of Spades, 013: King of Spades, 014: Ace of Spades
#	102-110: 2 of Hearts to 10 of Hearts, 111: Jack of Hearts, 112: Queen of Hearts, 113: King of Hearts, 114: Ace of Hearts
#	202-210: 2 of Clubs to 10 of Clubs, 211: Jack of Clubs, 212: Queen of Clubs, 213: King of Clubs, 214: Ace of Clubs
#	302-310: 2 of Diamonds to 10 of Diamonds, 311: Jack of Diamonds, 312: Queen of Diamonds, 313: King of Diamonds, 314: Ace of Diamonds

for i in range(0, 4):
	for j in range(2, 14):
		deckCards.append(j + i * 100)
		
# check if array is correct		
#for i in range(0, len(cards_in_deck)):
#	print cards_in_deck[i]

# output human readable name for card identifier (as stated above)
def friendlyCardName(cardNumber): 
	rank = cardNumber % 100 # last two digits denote rank
	suit = cardNumber / 100 # first digit denotes suit
	
	if suit == 0:
		suitName = " of Spades"
	elif suit == 1:
		suitName = " of Hearts"
	elif suit == 2:
		suitName = " of Clubs"
	else:
		suitName = " of Diamonds"
	
	if rank == 14:
		return "Ace" + suitName
	elif rank == 13:
		return "King" + suitName
	elif rank == 12:
		return "Queen" + suitName
	elif rank == 11:
		return "Jack" + suitName
	else:
		return str(rank) + suitName

# draw cards and take them away from deck
def drawCards(numberOfCardsToDraw): 
	pickedCards = [] # create empty array for picked cards
	
	for i in range(0, numberOfCardsToDraw): 
		cardIndex = randint(0, len(deckCards)-1) # pick random card
		pickedCards.append(deckCards[cardIndex]) # append picked card to picked cards array
		del deckCards[cardIndex] # remove picked card from deck
	
	return pickedCards

# print player's cards in console
def showPlayerCards(): 
	print "---"
	sleep(1)
	print "Your cards are:\n" 
	
	for i in range(0, len(playerCards)):
		print "Card " + str(i + 1) + ": " + friendlyCardName(playerCards[i]) + "\n"

# move card from player's hand to table
def playerPlaysCard(cardIndex): 
	tableCards.append(playerCards[cardIndex])
	print "---"
	sleep(1)
	print "You played: " + friendlyCardName(playerCards[cardIndex])
	del playerCards[cardIndex]
	
	if len(playerCards) == 0: # if this is the last card that's played then the player wins
		showTableCards()
		print "---"
		sleep(1)
		print "You won! Play again?"
		exit()

# move card from computer's hand to table
def computerPlaysCard(cardIndex): 
	tableCards.append(computerCards[cardIndex])
	print "---"
	sleep(1)
	print "Your opponent played."
	del computerCards[cardIndex]
	
	if len(computerCards) == 0: # if this is the last card that's played then the player loses
		showTableCards()
		print "---"
		sleep(1)
		print "You lost. Your opponent has no more cards. Play again?"
		exit()

# print top card on table in console
def showTableCards(): 
	if len(tableCards) > 0: # if there are already cards on the table 
		print "---"
		sleep(1)
		print "The top card on the table is: \n"
		print friendlyCardName(tableCards[len(tableCards)-1])
		
	else: # if there are no cards on the table
		print "---"
		sleep(1)
		print "There are no cards on the table."

# check if card to play is higher than card on table
def compareTwoCards(checkCard, checkAgainstCard): 
	if (checkCard % 100) >= (checkAgainstCard % 100): # only compare rank of card, not suit
		return True
		
	else:
		return False

# sorts cards by rank, which is used for the sorted() function		
def sortKey(num): 
	return num % 100

# runs through cards until it finds an appropriate card to play
def executeComputersTurn(): 
	global computerCards # make sure to use global variable, not local scope variable
	computerCards = sorted(computerCards, key = sortKey) # sort cards in ascending order
	
	if len(tableCards) > 0:
	
		for i in range(0, len(computerCards)): # go through all cards and check if there is a card to play
		
			if compareTwoCards(computerCards[i], tableCards[len(tableCards)-1]):
				computerPlaysCard(i)
				return True
				
		computerPicksUpTableCards() # if a card can't be played, table cards are picked up and added to player's/computer's hand
		return False
		
	else: # if there's no card on the table, play lowest card in hand
		computerCards = sorted(computerCards, key = sortKey) # sort cards by rank
		computerPlaysCard(0) # play first card in sorted cards, i.e. card with lowest rank

# check if player has any cards to play, i.e. legal moves
def playerHasLegalCards():
	if len(tableCards) > 0:
	
		for i in range(0, len(playerCards)):
		
			if compareTwoCards(playerCards[i], tableCards[len(tableCards)-1]): # if the player has a card that's higher than the rank of the table card, they can play that card
				return True
				
		return False
		
	else: # if there is no card on the table then player's choice
		return True

# player picks up all the cards on the table
def playerPicksUpTableCards():
	if len(tableCards) > 0:
	
		for i in range(0, len(tableCards)):
			playerCards.append(tableCards[i]) # adds table cards to player's existing cards in hand
		
		del tableCards[:]
		print "---"
		sleep(1)
		print "You don't have a card to play. Pick up the card(s) from the table."

# computer picks up all the cards on the table
def computerPicksUpTableCards():
	if len(tableCards) > 0:
	
		for i in range(0, len(tableCards)):
			computerCards.append(tableCards[i]) # adds table cards to computer's existing cards in hand
			
		del tableCards[:]
		print "---"
		sleep(1)
		print "Your opponent doesn't have a card to play. They've picked up the card(s) from the table."	
	
#print compareTwoCards(112, 309) # check that modulo comparison works
#print compareTwoCards(105, 309) 

# set-up card game
print "\nWould you like to play a game? \n"
sleep(1)

print "In this game you'll play against an opponent. The aim of the game is to play all of your cards in your hand before your opponent. Valid cards are of the same value or higher than the card on the table." 
sleep(3)

print "---"
print "Your cards are being dealt..."
sleep(1)

playerCards = drawCards(6) # deal player's cards
computerCards = drawCards(6) # deal computer's cards

# play card game - main loop
while True:	
	playerCards = sorted(playerCards, key = sortKey) # sort cards in ascending order
	
	if playerHasLegalCards():
		
		while True:
			showPlayerCards()
			playerCardChoice = raw_input("Pick your card: ") # player types in card number
		
			if int(playerCardChoice) > len(playerCards): # player selects invalid card
				print "---"
				sleep(1)
				print "Invalid choice. Pick a card from your hand."
			
			elif len(tableCards) == 0: # allowed to play any card when there are no cards on table
				playerPlaysCard(int(playerCardChoice)-1)
				break
			
			elif compareTwoCards(playerCards[int(playerCardChoice) - 1], tableCards[len(tableCards)-1]): # check if chosen card is equal to or higher in rank than card on the table
				playerPlaysCard(int(playerCardChoice)-1)
				break
			
			else: # if none of the above, ask player to pick valid card to play
				print "---"
				sleep(1)
				print "Invalid choice. Pick a card that's the same or higher than the top table card."
		
	else: # no valid cards therefore player picks up all cards on table
		playerPicksUpTableCards()

	executeComputersTurn() # let computer play
	showTableCards() # show top card on the table

